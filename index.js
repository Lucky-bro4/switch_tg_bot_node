const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const sequelize = require('./db');
const { Item, verifyUser, reservItem } = require ('./models/models');
require('dotenv').config()

let message_id = 0

const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});
const app = express();
const adminChatId = 701729944
let chatId = 0
app.use(express.json());
app.use(cors());

bot.setMyCommands([
  {command: '/start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å'}
])

bot.on('message', async (msg) => {

  chatId = msg.chat.id;
  const text = msg.text;
  const username = msg.from.username;


  try {

    if(text === '/start') {
      
      const user = await verifyUser(chatId, username)

      const presaleText = `Switch - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ —Ç–≤–æ–π –∫–ª—é—á –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –≥–∞—Ä–¥–µ—Ä–æ–±—É.\n
üåü –¢–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–± –¥—ã—à–∏—Ç —Å–≤–æ–±–æ–¥–æ–π - –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≤–∞–ª–æ–≤ –∏–∑ –æ–¥–µ–∂–¥—ã, –∫–æ—Ç–æ—Ä—É—é "–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–∞–¥–µ–Ω—É"!
üí∞ –¢–≤–æ–π –∫–æ—à–µ–ª–µ–∫ —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ - –ø–æ–∫—É–ø–∞–π –º–µ–Ω—å—à–µ, –∞ —Å—Ç–∏–ª—å–Ω—ã—Ö –≤–µ—â–µ–π –Ω–æ—Å–∏ –±–æ–ª—å—à–µ!
üåç –ü–ª–∞–Ω–µ—Ç–∞ —Ç–µ–±–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ - –º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ –≤–º–µ—Å—Ç–µ –±–æ—Ä–µ–º—Å—è —Å –ø–µ—Ä–µ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º!\n
‚ú® Switch - —ç—Ç–æ —Ç–≤–æ–π –ø—É—Ç—å –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é!`
      
      if (chatId === adminChatId) {
        await bot.sendMessage(chatId, presaleText, {
          reply_markup: {
            keyboard: [
              ['–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Switch?', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'],
              ['/addProduct']
            ],
            resize_keyboard: true
          }
        })
      } else {
        await bot.sendMessage(chatId, presaleText, {
          reply_markup: {
            keyboard: [
              ['–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Switch?', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'],
              [{text: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É üóí', web_app: {url: process.env.WEB_APP_URL + 'form'}}]
            ],
            resize_keyboard: true
          }
        })
      }
      
      
      const saleText = `üëá –ó–∞–≥–ª—è–¥—ã–≤–∞–π –∫ –Ω–∞–º –Ω–∞ —Å–∞–π—Ç –∏ —Å–æ–∑–¥–∞–≤–∞–π —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑!\n`

      await bot.sendMessage(chatId, saleText, {
        reply_markup: {
          inline_keyboard: [
            [{text: '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', web_app: {url: process.env.WEB_APP_URL}}]
          ]
        }
      })

    } else if (text === '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Switch?') {


      const message_how_switch_works = `Switch - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –ø–æ —à—ç—Ä–∏–Ω–≥—É –æ–¥–µ–∂–¥—ã\n
- –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–µ—â–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã –æ—Ç–±–æ—Ä–∞, –æ—Ü–µ–Ω–∫–∏ –∏ —Ö–∏–º—á–∏—Å—Ç–∫–∏ –æ–¥–µ–∂–¥—ã.
- –≤–µ—â–∏ –±–æ–ª–µ–µ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω—ã–µ –∫ –Ω–æ—à–µ–Ω–∏—é –∏–ª–∏ –Ω–µ –ø–æ–ª—å–∑—É—é—â–∏–µ—Å—è —Å–ø—Ä–æ—Å–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–∞—é—Ç—Å—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É.\n
- <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–∏–º –≤–∞—Å –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –≤–µ—â–∞–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ–Ω–∏ –µ—â–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑—É –∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n
<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?</b>\n
1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 4-—Ö –≤–µ—â–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å".\n
2. –û—Ñ–æ—Ä–º–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É, —É–∫–∞–∑–∞–≤ –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n
3. –í —Ç–µ—á–µ–Ω–∏–µ 4-—Ö —á–∞—Å–æ–≤ –∫—É—Ä—å–µ—Ä –ø—Ä–∏–≤–µ–∑–µ—Ç –∫–æ–º–ø–ª–µ–∫—Ç –æ–¥–µ–∂–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n
4. –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –Ω–µ —Å–æ–±—Ä–∞–ª–∏ –Ω–æ–≤—ã–π —Å–µ—Ç, –∫—É—Ä—å–µ—Ä –ø—Ä–∏–µ–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å –≤–µ—â–∏ (–∑–∞ 2 —á–∞—Å–∞ –¥–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã –º—ã –ø—Ä–∏—à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç)\n
5. –û–¥–µ–∂–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏ —Ö–∏–º—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ —á–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å / —Ñ–æ–Ω–¥ / –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É.

<b>–ó–∞–∫–∞–∑—ã, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ —Å 8:00 –¥–æ 21:00, –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ —ç—Ç–æ—Ç –∂–µ –¥–µ–Ω—å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n
–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É.</b>`

      await bot.sendMessage(chatId, message_how_switch_works, {parse_mode: 'HTML'})
    } else if (text === '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏') {

      message_to_connect_with = `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏/–∏–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Ä–≤–∏—Å–æ–º:\n
1. –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å", –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –º—ã –µ–≥–æ –ø–æ–ª—É—á–∏–º.\n
2. –ü–æ—á—Ç–∞: hello.switch@yandex.ru`

      await bot.sendMessage(chatId, message_to_connect_with, {
        reply_markup: {
          inline_keyboard: [
            [{text: '–ù–∞–ø–∏—Å–∞—Ç—å', callback_data: 'message_to_bot'}],
          ]
        }
      })

      bot.on('callback_query', msg => {
        const data = msg.data
        // const {message_id, text} = msg.message
        if (data === 'message_to_bot') {
          bot.sendMessage(chatId, '–ó–∞–ø–∏—Å—ã–≤–∞—é ‚úçÔ∏è')
          bot.on('message', async mg => {
            message_id = mg.message_id
            if (mg.text === '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Switch?' || '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏' || '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É üóí') {
              return
            } else {
              await bot.forwardMessage(ADMIN_CHAT_ID, chatId, message_id)
              await bot.sendMessage(chatId, `–ü–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Ç–µ ${message_id}`, {
                reply_to_message_id: message_id
              })
            }
          })
        }
      })
      
    } // else {
    //     await bot.sendMessage(chatId, '–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª ü¶øü¶æ')
  // }

    if (text === '/addProduct' && chatId === adminChatId) {
      
        const product = ''
        let item = product
          
    } else if (text === '–ö—É—Ä—Ç–∫–∞;–ö—É—Ä—Ç–∫–∞ –æ—Å–µ–Ω–Ω—è—è;5;12000;—Ñ–æ—Ç–æ') {
      try {
        await sequelize.authenticate()
        await sequelize.sync()
        .then(() => Item.create({
          category: text.split(';')[0],
          name: text.split(';')[1],
          condition: text.split(';')[2],
          price: text.split(';')[3],
          image: text.split(';')[4],
          })
        )
        bot.sendMessage(chatId, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å')
      } catch (e) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ item —Å–ª–æ–º–∞–ª–æ—Å—å', e)
        bot.sendMessage(chatId, `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ item —Å–ª–æ–º–∞–ª–æ—Å—å ${e}`)
      }
    }

    

  } catch (error) {
    console.log('–ë–æ—Ç –Ω–µ –¥—ã—à–∏—Ç!', (error))
    await bot.sendMessage(chatId, '–ë–æ—Ç –Ω–µ –¥—ã—à–∏—Ç! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º üè•')
  }
  
  

  if(msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data)
      console.log(data)
      await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!')
      await bot.sendMessage(chatId, '–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: ' + data?.country);
      await bot.sendMessage(chatId, '–í–∞—à–∞ —É–ª–∏—Ü–∞ ' + data?.street);

      setTimeout( async () => {
        await bot.sendMessage(chatId, '–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ');
      }, 3000)
    } catch (e) {
        console.log(e)
    }
  }
});

bot.on('callback_query', async message => {

  try {
    const data = message.data
    // const {message_id, text} = msg.message
    if (data === 'order_confirm') {
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
        reply_markup: {
          inline_keyboard: [
            [{text: 'üí∏–ù–∞–ª–∏—á–Ω—ã–º–∏', callback_data: 'cash'}], [{text: 'üí≥–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π', callback_data: 'card'}]
          ]
        }
      })
  }
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã' + e)
  }
})

bot.on('callback_query', async message => {

  try {
    const data = message.data
    // const {message_id, text} = msg.message
    if (data === 'card') {
      await bot.sendInvoice(chatId, '–°–≤–∏—Ç—á', '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', 'invoce_from_tg_bot', process.env.PAYMENT_TOKEN, 'RUB', [{label: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', amount: switchPrice * 100}], {
        photo_url: `${process.env.WEB_APP_URL}/Images/mainLogoLarge2w.png`,
        photo_height: 280,
        photo_width: 280,
        need_phone_number: Boolean(true),
        need_shipping_address: Boolean(true),
      })
    return 'success'
  }
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –æ–ø–ª–∞—Ç—ã' + e)
  }
})

let switchPrice = 0
app.post( '/web-data', async (req, res) => {
  
  const {queryId, products, totalPrice} = req.body;
  switchPrice = totalPrice
  reservItem(chatId, products)
  try {
    let media_array = []
    for (i = 0; i < products.length; i++) {
      let photo_url = process.env.WEB_APP_URL + products[i].img
      media_array.push({type: 'photo',
        media: photo_url, 
        parse_mode: 'HTML'})
    }

    // [products.map(item => process.env.WEB_APP_URL + item.img, {parse_mode: 'HTML'})]
    await bot.sendMediaGroup(chatId, media_array)
    await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      // –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤—ã–º —Å–≤–∏—Ç—á–µ–º! –ó–∞ 3 —á–∞—Å–∞ –¥–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã –º—ã –ø—Ä–∏—à–ª–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —á–∞—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ—â–∏ –µ—â–µ –Ω–∞ —Å—É—Ç–∫–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ - –≤—ã–±–æ—Ä –∑–∞ –≤–∞–º–∏!
      title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
      input_message_content: {
        message_text: `<b>–¢–≤–æ–π –∑–∞–∫–∞–∑:</b>
${products.map(item => item.title).join(`\n`)}\n
–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–∏—Ç—á–∞: ${switchPrice}`,
        parse_mode: 'HTML'},
      reply_markup: {
        inline_keyboard: [
          [{text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data: 'order_confirm'}],
          [{text: '–í—ã–±–µ—Ä—É —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ', web_app: {url: process.env.WEB_APP_URL}}]
        ]
      }
    })
  
    return res.status(200).json({});
  } catch (e) {
      await bot.answerWebAppQuery(queryId, {
        type: 'article',
        id: queryId,
        title: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑',
        input_message_content: {message_text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑'}
      })
    console.log('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã' + e)
    return res.status(500).json({});
  }
})

app.post( '/newProduct', async (req, res) => {
  
  const { category, name, condition, price, photo } = req.body;
  console.log(req.body)
  
  try {

    item = await Item.create({
      category: category,
      name: name,
      condition: condition,
      price: price,
      image: process.env.WEB_APP_URL + photo,
      status: 'available',
      available: Boolean(true)
    })

    return res.status(200).json({});
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' + e)
    return res.status(500).json({});
  }
})

app.get( '/products', async (req, res) => {
  
  try {
    const products = await Item.findAll(({ where: { available: Boolean(true) }}));
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤' });
  }  

})



app.listen(process.env.PORT, async () => {
  console.log('server started on PORT ' + process.env.PORT)

  try {
    await sequelize.sync()
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–î:', e)
  }
})